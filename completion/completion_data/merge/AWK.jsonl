{"task_id": "AWK/36-0-single", "prompt": "Using the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n[MASK]"}
{"task_id": "AWK/36-1-single", "prompt": "Using the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n[MASK]\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n[MASK]\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n}' /etc/passwd"}
{"task_id": "AWK/43-0-single", "prompt": "Using the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd", "canonical_solution": "awk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk '{\n[MASK]\n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n[MASK]\n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd"}
{"task_id": "AWK/43-1-single", "prompt": "Using the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd", "canonical_solution": "awk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (num_digits > max_digits) {\n[MASK]\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (num_digits > max_digits) {\n[MASK]\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd"}
{"task_id": "AWK/44-0-single", "prompt": "Using the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd", "canonical_solution": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n[MASK]\n        print \"No digits found\";\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n[MASK]\n        print \"No digits found\";\n    }\n}' /etc/passwd"}
{"task_id": "AWK/44-1-single", "prompt": "Using the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd", "canonical_solution": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n[MASK]\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n[MASK]\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd"}
{"task_id": "AWK/45-0-single", "prompt": "Using the awk command in Linux, complete the following task: Print words containing r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words containing r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n[MASK]\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n[MASK]\n    }\n}' /etc/passwd"}
{"task_id": "AWK/45-1-single", "prompt": "Using the awk command in Linux, complete the following task: Print words containing r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words containing r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n[MASK]"}
{"task_id": "AWK/46-0-single", "prompt": "Using the awk command in Linux, complete the following task: Print words without r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words without r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n            print $i\n    }\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n            print $i\n    }\n[MASK]"}
{"task_id": "AWK/46-1-single", "prompt": "Using the awk command in Linux, complete the following task: Print words without r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words without r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n[MASK]\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n[MASK]\n    }\n}' /etc/passwd"}
{"task_id": "AWK/49-0-single", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd", "canonical_solution": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n[MASK]\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n[MASK]\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd"}
{"task_id": "AWK/49-1-single", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd", "canonical_solution": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n[MASK]\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n[MASK]\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd"}
{"task_id": "AWK/50-0-single", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd", "canonical_solution": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n[MASK]\n    if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n[MASK]\n    if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd"}
{"task_id": "AWK/50-1-single", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd", "canonical_solution": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n[MASK]\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n[MASK]\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd"}
{"task_id": "AWK/36-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\n[MASK]\n    for (word in word_count)\n        if (word_count[word] == 1)\n[MASK]\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\n[MASK]\n    for (word in word_count)\n        if (word_count[word] == 1)\n[MASK]\n[MASK]"}
{"task_id": "AWK/36-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n[MASK]\n[MASK]\n[MASK]\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n[MASK]\n[MASK]\n[MASK]\n[MASK]"}
{"task_id": "AWK/43-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd", "canonical_solution": "awk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd\n\n* Incomplete Code:\n[MASK]\n    num_digits = gsub(/[0-9]/,\"\"); \n[MASK]\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\n[MASK]\n    print line_number\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]\n    num_digits = gsub(/[0-9]/,\"\"); \n[MASK]\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\n[MASK]\n    print line_number\n[MASK]"}
{"task_id": "AWK/43-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd", "canonical_solution": "awk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk '{\n[MASK]\n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n[MASK]\n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n[MASK]"}
{"task_id": "AWK/44-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd", "canonical_solution": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n[MASK]\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n[MASK]\n        print \"No digits found\";\n    }\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n[MASK]\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n[MASK]\n        print \"No digits found\";\n    }\n[MASK]"}
{"task_id": "AWK/44-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd", "canonical_solution": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n[MASK]\n    } else {\n[MASK]\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n[MASK]\n    } else {\n[MASK]\n    }\n}' /etc/passwd"}
{"task_id": "AWK/45-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words containing r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words containing r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n[MASK]\n[MASK]\n[MASK]\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n[MASK]\n[MASK]\n[MASK]\n    }\n}' /etc/passwd"}
{"task_id": "AWK/45-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words containing r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words containing r in/etc/passwd\n\n* Incomplete Code:\n[MASK]\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n[MASK]"}
{"task_id": "AWK/46-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words without r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words without r in/etc/passwd\n\n* Incomplete Code:\n[MASK]\n[MASK]\n        if ($i !~ /r/)\n            print $i\n    }\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]\n[MASK]\n        if ($i !~ /r/)\n            print $i\n    }\n[MASK]"}
{"task_id": "AWK/46-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words without r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words without r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n[MASK]\n        if ($i !~ /r/)\n[MASK]\n    }\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n[MASK]\n        if ($i !~ /r/)\n[MASK]\n    }\n[MASK]"}
{"task_id": "AWK/49-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd", "canonical_solution": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '{\n    line_length = length($0);\n[MASK]\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n[MASK]\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n    line_length = length($0);\n[MASK]\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n[MASK]\n}' /etc/passwd"}
{"task_id": "AWK/49-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd", "canonical_solution": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd\n\n* Incomplete Code:\n[MASK]\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n[MASK]\n    }\n}\n[MASK]\n    print max_line;\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n[MASK]\n    }\n}\n[MASK]\n    print max_line;\n}' /etc/passwd"}
{"task_id": "AWK/50-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd", "canonical_solution": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '\n[MASK]\n{\n[MASK]\n[MASK]\n        min_length = line_length;\n[MASK]\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '\n[MASK]\n{\n[MASK]\n[MASK]\n        min_length = line_length;\n[MASK]\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n[MASK]"}
{"task_id": "AWK/50-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd", "canonical_solution": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd\n\n* Incomplete Code:\n[MASK]\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n[MASK]\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n[MASK]\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd"}
{"task_id": "AWK/1-0-span", "prompt": "Using the awk command in Linux, accomplish the following task: Display users whose shell is '/bin/bash' and print their usernames.", "canonical_solution": "awk -F: '$7 == \"/bin/bash\" {print $1}' /etc/passwd", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, accomplish the following task: Display users whose shell is '/bin/bash' and print their usernames.\n\n* Incomplete Code:\nawk -F: '$7 [MASK]t $1}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "awk -F: '$7 [MASK]t $1}' /etc/passwd"}
{"task_id": "AWK/1-1-span", "prompt": "Using the awk command in Linux, accomplish the following task: Display users whose shell is '/bin/bash' and print their usernames.", "canonical_solution": "awk -F: '$7 == \"/bin/bash\" {print $1}' /etc/passwd", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, accomplish the following task: Display users whose shell is '/bin/bash' and print their usernames.\n\n* Incomplete Code:\nawk -F: '$7 == \"/bin/ba[MASK]/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "awk -F: '$7 == \"/bin/ba[MASK]/passwd"}
{"task_id": "AWK/2-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the count of occurrences of each shell in /etc/passwd, with the format 'shell count'.", "canonical_solution": "awk -F: '{shells[$NF]++} END {for (shell in shells) print shell, shells[shell]}' /etc/passwd", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the count of occurrences of each shell in /etc/passwd, with the format 'shell count'.\n\n* Incomplete Code:\nawk -F[MASK]n shells) print shell, shells[shell]}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk -F[MASK]n shells) print shell, shells[shell]}' /etc/passwd"}
{"task_id": "AWK/2-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the count of occurrences of each shell in /etc/passwd, with the format 'shell count'.", "canonical_solution": "awk -F: '{shells[$NF]++} END {for (shell in shells) print shell, shells[shell]}' /etc/passwd", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the count of occurrences of each shell in /etc/passwd, with the format 'shell count'.\n\n* Incomplete Code:\nawk -F: '{shells[$NF]++} END {for (shell [MASK]]}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk -F: '{shells[$NF]++} END {for (shell [MASK]]}' /etc/passwd"}
{"task_id": "AWK/3-0-span", "prompt": "# Using the awk command in Linux, accomplish the following task: The 'data/AWK/9_1.txt' file contains records of employee IDs and names, for example: '100 Jason Smith'. The 'data/AWK/9_2.txt' file contains employee IDs and bonuses, for example: '100 $5,000', '200 $500', '300 $3,000', '400 $1,250'. Merge the two files and output them as follows: '100 Jason $5,000'.", "canonical_solution": "awk 'NR == FNR {names[$1] = $2; next} $1 in names {print $1, names[$1], $2}' data/AWK/9_1.txt data/AWK/9_2.txt", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \n# Using the awk command in Linux, accomplish the following task: The 'data/AWK/9_1.txt' file contains records of employee IDs and names, for example: '100 Jason Smith'. The 'data/AWK/9_2.txt' file contains employee IDs and bonuses, for example: '100 $5,000', '200 $500', '300 $3,000', '400 $1,250'. Merge the two files and output them as follows: '100 Jason $5,000'.\n\n* Incomplete Code:\nawk [MASK]s {print $1, names[$1], $2}' data/AWK/9_1.txt data/AWK/9_2.txt\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "hard", "mask_code": "awk [MASK]s {print $1, names[$1], $2}' data/AWK/9_1.txt data/AWK/9_2.txt"}
{"task_id": "AWK/3-1-span", "prompt": "# Using the awk command in Linux, accomplish the following task: The 'data/AWK/9_1.txt' file contains records of employee IDs and names, for example: '100 Jason Smith'. The 'data/AWK/9_2.txt' file contains employee IDs and bonuses, for example: '100 $5,000', '200 $500', '300 $3,000', '400 $1,250'. Merge the two files and output them as follows: '100 Jason $5,000'.", "canonical_solution": "awk 'NR == FNR {names[$1] = $2; next} $1 in names {print $1, names[$1], $2}' data/AWK/9_1.txt data/AWK/9_2.txt", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \n# Using the awk command in Linux, accomplish the following task: The 'data/AWK/9_1.txt' file contains records of employee IDs and names, for example: '100 Jason Smith'. The 'data/AWK/9_2.txt' file contains employee IDs and bonuses, for example: '100 $5,000', '200 $500', '300 $3,000', '400 $1,250'. Merge the two files and output them as follows: '100 Jason $5,000'.\n\n* Incomplete Code:\nawk 'NR ==[MASK]nt $1, names[$1], $2}' data/AWK/9_1.txt data/AWK/9_2.txt\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "hard", "mask_code": "awk 'NR ==[MASK]nt $1, names[$1], $2}' data/AWK/9_1.txt data/AWK/9_2.txt"}
{"task_id": "AWK/4-0-span", "prompt": "Using the awk command in Linux, complete the following task: In /etc/passwd, print the lines with UID less than 100.", "canonical_solution": "awk -F: '$3 < 100 {print}' /etc/passwd", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: In /etc/passwd, print the lines with UID less than 100.\n\n* Incomplete Code:\nawk -F: '$3 < 100 [MASK]asswd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "awk -F: '$3 < 100 [MASK]asswd"}
{"task_id": "AWK/4-1-span", "prompt": "Using the awk command in Linux, complete the following task: In /etc/passwd, print the lines with UID less than 100.", "canonical_solution": "awk -F: '$3 < 100 {print}' /etc/passwd", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: In /etc/passwd, print the lines with UID less than 100.\n\n* Incomplete Code:\na[MASK]0 {print}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "a[MASK]0 {print}' /etc/passwd"}
{"task_id": "AWK/5-0-span", "prompt": "Using the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows: 'Zhang Dandan 41117397 :250:100:175', where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print and display the second donation amount of people with the surname 'Zhang' along with their first names.", "canonical_solution": "awk -F \"[ :]+\" '$1~/^Zhang/{print $2,$(NF-1)}' data/AWK/contribution.txt", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows: 'Zhang Dandan 41117397 :250:100:175', where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print and display the second donation amount of people with the surname 'Zhang' along with their first names.\n\n* Incomplete Code:\nawk -F \"[ :]+\" '$1~/^Zha[MASK]AWK/contribution.txt\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk -F \"[ :]+\" '$1~/^Zha[MASK]AWK/contribution.txt"}
{"task_id": "AWK/5-1-span", "prompt": "Using the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows: 'Zhang Dandan 41117397 :250:100:175', where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print and display the second donation amount of people with the surname 'Zhang' along with their first names.", "canonical_solution": "awk -F \"[ :]+\" '$1~/^Zhang/{print $2,$(NF-1)}' data/AWK/contribution.txt", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows: 'Zhang Dandan 41117397 :250:100:175', where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print and display the second donation amount of people with the surname 'Zhang' along with their first names.\n\n* Incomplete Code:\nawk -F [MASK]2,$(NF-1)}' data/AWK/contribution.txt\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk -F [MASK]2,$(NF-1)}' data/AWK/contribution.txt"}
{"task_id": "AWK/6-0-span", "prompt": "Using the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows: 'Zhang Dandan 41117397 :250:100:175', where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print the surname 'Xiaoyu' and the corresponding ID number.", "canonical_solution": "awk -F \"[ :]+\" '$2~/^Xiaoyu/{print $1,$3}' data/AWK/contribution.txt", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows: 'Zhang Dandan 41117397 :250:100:175', where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print the surname 'Xiaoyu' and the corresponding ID number.\n\n* Incomplete Code:\nawk -F \"[ :]+\" '$2~[MASK]a/AWK/contribution.txt\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk -F \"[ :]+\" '$2~[MASK]a/AWK/contribution.txt"}
{"task_id": "AWK/6-1-span", "prompt": "Using the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows: 'Zhang Dandan 41117397 :250:100:175', where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print the surname 'Xiaoyu' and the corresponding ID number.", "canonical_solution": "awk -F \"[ :]+\" '$2~/^Xiaoyu/{print $1,$3}' data/AWK/contribution.txt", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows: 'Zhang Dandan 41117397 :250:100:175', where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print the surname 'Xiaoyu' and the corresponding ID number.\n\n* Incomplete Code:\nawk [MASK]int $1,$3}' data/AWK/contribution.txt\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk [MASK]int $1,$3}' data/AWK/contribution.txt"}
{"task_id": "AWK/7-0-span", "prompt": "Using the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows:\n# 'Zhang Dandan 41117397 :250:100:175\n# Zhang Xiaoyu 390320151 :155:90:201\n# Meng Feixue 80042789 :250:60:50\n# Wu Waiwai 70271111 :250:80:75\n# Liu Bingbing 41117483 :250:100:175\n# Wang Xiaoai 3515064655 :50:95:135\n# Zi Gege 1986787350 :250:168:200\n# Li Youjiu 918391635 :175:75:300\n# Lao Nanhai 918391635 :250:100:175',\n\n# where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print the full names and ID numbers of people with ID numbers starting with '41'", "canonical_solution": "awk -F \"[ :]+\" '$3~/^(41)/{print $1,$2,$3}' data/AWK/contribution.txt", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows:\n# 'Zhang Dandan 41117397 :250:100:175\n# Zhang Xiaoyu 390320151 :155:90:201\n# Meng Feixue 80042789 :250:60:50\n# Wu Waiwai 70271111 :250:80:75\n# Liu Bingbing 41117483 :250:100:175\n# Wang Xiaoai 3515064655 :50:95:135\n# Zi Gege 1986787350 :250:168:200\n# Li Youjiu 918391635 :175:75:300\n# Lao Nanhai 918391635 :250:100:175',\n\n# where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print the full names and ID numbers of people with ID numbers starting with '41'\n\n* Incomplete Code:\nawk -[MASK] $1,$2,$3}' data/AWK/contribution.txt\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk -[MASK] $1,$2,$3}' data/AWK/contribution.txt"}
{"task_id": "AWK/7-1-span", "prompt": "Using the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows:\n# 'Zhang Dandan 41117397 :250:100:175\n# Zhang Xiaoyu 390320151 :155:90:201\n# Meng Feixue 80042789 :250:60:50\n# Wu Waiwai 70271111 :250:80:75\n# Liu Bingbing 41117483 :250:100:175\n# Wang Xiaoai 3515064655 :50:95:135\n# Zi Gege 1986787350 :250:168:200\n# Li Youjiu 918391635 :175:75:300\n# Lao Nanhai 918391635 :250:100:175',\n\n# where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print the full names and ID numbers of people with ID numbers starting with '41'", "canonical_solution": "awk -F \"[ :]+\" '$3~/^(41)/{print $1,$2,$3}' data/AWK/contribution.txt", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: In data/AWK/contribution.txt, where the data format is as follows:\n# 'Zhang Dandan 41117397 :250:100:175\n# Zhang Xiaoyu 390320151 :155:90:201\n# Meng Feixue 80042789 :250:60:50\n# Wu Waiwai 70271111 :250:80:75\n# Liu Bingbing 41117483 :250:100:175\n# Wang Xiaoai 3515064655 :50:95:135\n# Zi Gege 1986787350 :250:168:200\n# Li Youjiu 918391635 :175:75:300\n# Lao Nanhai 918391635 :250:100:175',\n\n# where the first column is the surname, the second column is the first name (concatenating the first and second columns gives the full name), the third column is the corresponding ID number, and the last three columns are three donation amounts. Please print the full names and ID numbers of people with ID numbers starting with '41'\n\n* Incomplete Code:\nawk -F \"[ :]+\" '$[MASK]data/AWK/contribution.txt\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk -F \"[ :]+\" '$[MASK]data/AWK/contribution.txt"}
{"task_id": "AWK/8-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines 23 to 30 of the file /etc/services.", "canonical_solution": "awk 'NR>=23 && NR<=30' /etc/services", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines 23 to 30 of the file /etc/services.\n\n* Incomplete Code:\nawk 'NR>=23 &&[MASK]services\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "awk 'NR>=23 &&[MASK]services"}
{"task_id": "AWK/8-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines 23 to 30 of the file /etc/services.", "canonical_solution": "awk 'NR>=23 && NR<=30' /etc/services", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines 23 to 30 of the file /etc/services.\n\n* Incomplete Code:\nawk 'NR>[MASK] /etc/services\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "awk 'NR>[MASK] /etc/services"}
{"task_id": "AWK/9-0-span", "prompt": "Using the awk command in Linux, accomplish the following task: Find the lines in /etc/passwd where the fifth column is 'root'", "canonical_solution": "awk -F: '$5 == \"root\"' /etc/passwd", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, accomplish the following task: Find the lines in /etc/passwd where the fifth column is 'root'\n\n* Incomplete Code:\nawk -F: '$5 == \"[MASK]asswd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "awk -F: '$5 == \"[MASK]asswd"}
{"task_id": "AWK/9-1-span", "prompt": "Using the awk command in Linux, accomplish the following task: Find the lines in /etc/passwd where the fifth column is 'root'", "canonical_solution": "awk -F: '$5 == \"root\"' /etc/passwd", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, accomplish the following task: Find the lines in /etc/passwd where the fifth column is 'root'\n\n* Incomplete Code:\na[MASK] \"root\"' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "a[MASK] \"root\"' /etc/passwd"}
{"task_id": "AWK/10-0-span", "prompt": "Using the awk command in Linux, complete the following task: Count the number of empty lines in the /etc/services file.", "canonical_solution": "awk '/^$/{i++}END{print i}' /etc/services", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Count the number of empty lines in the /etc/services file.\n\n* Incomplete Code:\nawk '/^$/{i++}END{[MASK]ervices\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "awk '/^$/{i++}END{[MASK]ervices"}
{"task_id": "AWK/10-1-span", "prompt": "Using the awk command in Linux, complete the following task: Count the number of empty lines in the /etc/services file.", "canonical_solution": "awk '/^$/{i++}END{print i}' /etc/services", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Count the number of empty lines in the /etc/services file.\n\n* Incomplete Code:\nawk '/^$/{i++}END{p[MASK]rvices\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "awk '/^$/{i++}END{p[MASK]rvices"}
{"task_id": "AWK/11-0-span", "prompt": "Using the awk command in Linux, accomplish the following task: Given that each line in data/AWK/url.txt has the format 'http://www.etiantian.org/index.html', extract the domain name and perform counting and sorting based on domain names.", "canonical_solution": "awk -F/ '{print $3}' data/AWK/url.txt | sort | uniq -c | sort -nr", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, accomplish the following task: Given that each line in data/AWK/url.txt has the format 'http://www.etiantian.org/index.html', extract the domain name and perform counting and sorting based on domain names.\n\n* Incomplete Code:\nawk -F/ '{print[MASK]ort | uniq -c | sort -nr\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk -F/ '{print[MASK]ort | uniq -c | sort -nr"}
{"task_id": "AWK/11-1-span", "prompt": "Using the awk command in Linux, accomplish the following task: Given that each line in data/AWK/url.txt has the format 'http://www.etiantian.org/index.html', extract the domain name and perform counting and sorting based on domain names.", "canonical_solution": "awk -F/ '{print $3}' data/AWK/url.txt | sort | uniq -c | sort -nr", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, accomplish the following task: Given that each line in data/AWK/url.txt has the format 'http://www.etiantian.org/index.html', extract the domain name and perform counting and sorting based on domain names.\n\n* Incomplete Code:\nawk -F/ '{pr[MASK]| sort | uniq -c | sort -nr\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk -F/ '{pr[MASK]| sort | uniq -c | sort -nr"}
{"task_id": "AWK/12-0-span", "prompt": "Using the awk command in Linux, complete the following task: In the /etc/passwd file, where ':' is the delimiter, how many lines have a value greater than 15 in the third field?", "canonical_solution": "awk -F \":\" '$3>15{a+=1;print a}' /etc/passwd", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: In the /etc/passwd file, where ':' is the delimiter, how many lines have a value greater than 15 in the third field?\n\n* Incomplete Code:\nawk -F \":\" '$3>[MASK] /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "awk -F \":\" '$3>[MASK] /etc/passwd"}
{"task_id": "AWK/12-1-span", "prompt": "Using the awk command in Linux, complete the following task: In the /etc/passwd file, where ':' is the delimiter, how many lines have a value greater than 15 in the third field?", "canonical_solution": "awk -F \":\" '$3>15{a+=1;print a}' /etc/passwd", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: In the /etc/passwd file, where ':' is the delimiter, how many lines have a value greater than 15 in the third field?\n\n* Incomplete Code:\nawk -F \":\" '$[MASK]}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "awk -F \":\" '$[MASK]}' /etc/passwd"}
{"task_id": "AWK/13-0-span", "prompt": "Using the awk command in Linux, accomplish the following task: Print all the commands in the environment variable $PATH that consist of only four arbitrary characters", "canonical_solution": "echo $PATH | tr ':' '\\n' | awk 'length($0) == 4'", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, accomplish the following task: Print all the commands in the environment variable $PATH that consist of only four arbitrary characters\n\n* Incomplete Code:\necho[MASK]' | awk 'length($0) == 4'\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "echo[MASK]' | awk 'length($0) == 4'"}
{"task_id": "AWK/13-1-span", "prompt": "Using the awk command in Linux, accomplish the following task: Print all the commands in the environment variable $PATH that consist of only four arbitrary characters", "canonical_solution": "echo $PATH | tr ':' '\\n' | awk 'length($0) == 4'", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, accomplish the following task: Print all the commands in the environment variable $PATH that consist of only four arbitrary characters\n\n* Incomplete Code:\necho $PATH [MASK] 'length($0) == 4'\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "mask_code": "echo $PATH [MASK] 'length($0) == 4'"}
{"task_id": "AWK/14-0-span", "prompt": "Using the awk command in Linux, complete the following task: Sort /etc/passwd in descending order of word frequency.", "canonical_solution": "awk 'BEGIN{RS=\"[ ]+\"}{print $0}' /etc/passwd | sort |uniq -c|sort", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Sort /etc/passwd in descending order of word frequency.\n\n* Incomplete Code:\nawk 'BEGIN{RS=[MASK]sswd | sort |uniq -c|sort\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk 'BEGIN{RS=[MASK]sswd | sort |uniq -c|sort"}
{"task_id": "AWK/14-1-span", "prompt": "Using the awk command in Linux, complete the following task: Sort /etc/passwd in descending order of word frequency.", "canonical_solution": "awk 'BEGIN{RS=\"[ ]+\"}{print $0}' /etc/passwd | sort |uniq -c|sort", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Sort /etc/passwd in descending order of word frequency.\n\n* Incomplete Code:\nawk 'BEGIN{RS=\"[ ]+\"}{print $0}[MASK] -c|sort\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "mask_code": "awk 'BEGIN{RS=\"[ ]+\"}{print $0}[MASK] -c|sort"}
{"task_id": "AWK/15-0-span", "prompt": "Using the awk command in Linux, complete the following task: Count the number of lines in the/etc/passwd file", "canonical_solution": "awk 'END {print NR}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Count the number of lines in the/etc/passwd file\n\n* Incomplete Code:\nawk [MASK]NR}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk [MASK]NR}' /etc/passwd"}
{"task_id": "AWK/15-1-span", "prompt": "Using the awk command in Linux, complete the following task: Count the number of lines in the/etc/passwd file", "canonical_solution": "awk 'END {print NR}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Count the number of lines in the/etc/passwd file\n\n* Incomplete Code:\nawk 'END[MASK] /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'END[MASK] /etc/passwd"}
{"task_id": "AWK/16-0-span", "prompt": "Using the awk command in Linux, complete the following task: Count the word count of the/etc/passwd file", "canonical_solution": "awk -F':' '{total += NF} END {print total}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Count the word count of the/etc/passwd file\n\n* Incomplete Code:\nawk -[MASK]D {print total}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -[MASK]D {print total}' /etc/passwd"}
{"task_id": "AWK/16-1-span", "prompt": "Using the awk command in Linux, complete the following task: Count the word count of the/etc/passwd file", "canonical_solution": "awk -F':' '{total += NF} END {print total}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Count the word count of the/etc/passwd file\n\n* Incomplete Code:\nawk[MASK]END {print total}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk[MASK]END {print total}' /etc/passwd"}
{"task_id": "AWK/17-0-span", "prompt": "Using the awk command in Linux, complete the following task: Count the number of bytes in the/etc/passwd file", "canonical_solution": "awk '{total += length($0) + 1} END {print total}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Count the number of bytes in the/etc/passwd file\n\n* Incomplete Code:\nawk '{total [MASK]print total}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{total [MASK]print total}' /etc/passwd"}
{"task_id": "AWK/17-1-span", "prompt": "Using the awk command in Linux, complete the following task: Count the number of bytes in the/etc/passwd file", "canonical_solution": "awk '{total += length($0) + 1} END {print total}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Count the number of bytes in the/etc/passwd file\n\n* Incomplete Code:\nawk '{total += [MASK]nt total}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{total += [MASK]nt total}' /etc/passwd"}
{"task_id": "AWK/18-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line number for each line in the/etc/passwd file", "canonical_solution": "awk '{print NR}' /etc/passwd ", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number for each line in the/etc/passwd file\n\n* Incomplete Code:\nawk [MASK]' /etc/passwd \n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk [MASK]' /etc/passwd "}
{"task_id": "AWK/18-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line number for each line in the/etc/passwd file", "canonical_solution": "awk '{print NR}' /etc/passwd ", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number for each line in the/etc/passwd file\n\n* Incomplete Code:\nawk[MASK]}' /etc/passwd \n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk[MASK]}' /etc/passwd "}
{"task_id": "AWK/19-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line number of the last line in the/etc/passwd file", "canonical_solution": "awk 'END{print NR}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number of the last line in the/etc/passwd file\n\n* Incomplete Code:\nawk 'END{p[MASK]wcoder.txt\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'END{p[MASK]wcoder.txt"}
{"task_id": "AWK/19-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line number of the last line in the/etc/passwd file", "canonical_solution": "awk 'END{print NR}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number of the last line in the/etc/passwd file\n\n* Incomplete Code:\nawk 'END{print [MASK]r.txt\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'END{print [MASK]r.txt"}
{"task_id": "AWK/20-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the last line of the/etc/passwd file", "canonical_solution": "awk '{last = $0} END {print last}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the last line of the/etc/passwd file\n\n* Incomplete Code:\nawk '{last = $0} END {[MASK]passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{last = $0} END {[MASK]passwd"}
{"task_id": "AWK/20-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the last line of the/etc/passwd file", "canonical_solution": "awk '{last = $0} END {print last}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the last line of the/etc/passwd file\n\n* Incomplete Code:\nawk '{last [MASK]ast}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{last [MASK]ast}' /etc/passwd"}
{"task_id": "AWK/21-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the last five lines of the/etc/passwd file", "canonical_solution": "awk '{arr[NR]=$0} END { i=NR-5+1; do{ print arr[i]; i++}while(i <= NR);  }' /etc/passwd", "level": "middle", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the last five lines of the/etc/passwd file\n\n* Incomplete Code:\nawk '{arr[NR]=$0} EN[MASK]+}while(i <= NR);  }' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{arr[NR]=$0} EN[MASK]+}while(i <= NR);  }' /etc/passwd"}
{"task_id": "AWK/21-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the last five lines of the/etc/passwd file", "canonical_solution": "awk '{arr[NR]=$0} END { i=NR-5+1; do{ print arr[i]; i++}while(i <= NR);  }' /etc/passwd", "level": "middle", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the last five lines of the/etc/passwd file\n\n* Incomplete Code:\nawk '{arr[NR][MASK][i]; i++}while(i <= NR);  }' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{arr[NR][MASK][i]; i++}while(i <= NR);  }' /etc/passwd"}
{"task_id": "AWK/22-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print multiples of 7 up to 500", "canonical_solution": "awk 'BEGIN {for (i = 1; i <= 500; i++) if (i % 7 == 0) print i}'", "level": "middle", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print multiples of 7 up to 500\n\n* Incomplete Code:\nawk 'BEGIN {for (i =[MASK]% 7 == 0) print i}'\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'BEGIN {for (i =[MASK]% 7 == 0) print i}'"}
{"task_id": "AWK/22-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print multiples of 7 up to 500", "canonical_solution": "awk 'BEGIN {for (i = 1; i <= 500; i++) if (i % 7 == 0) print i}'", "level": "middle", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print multiples of 7 up to 500\n\n* Incomplete Code:\nawk 'BEGIN {for (i = 1[MASK]7 == 0) print i}'\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'BEGIN {for (i = 1[MASK]7 == 0) print i}'"}
{"task_id": "AWK/23-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the content of the first 5 lines of/etc/passwd", "canonical_solution": "awk 'NR<=5' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the content of the first 5 lines of/etc/passwd\n\n* Incomplete Code:\nawk 'NR<=5[MASK]sswd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'NR<=5[MASK]sswd"}
{"task_id": "AWK/23-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the content of the first 5 lines of/etc/passwd", "canonical_solution": "awk 'NR<=5' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the content of the first 5 lines of/etc/passwd\n\n* Incomplete Code:\nawk 'NR<=[MASK]asswd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'NR<=[MASK]asswd"}
{"task_id": "AWK/24-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the content of line 5 of/etc/passwd", "canonical_solution": "awk 'NR==5' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the content of line 5 of/etc/passwd\n\n* Incomplete Code:\naw[MASK] /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "aw[MASK] /etc/passwd"}
{"task_id": "AWK/24-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the content of line 5 of/etc/passwd", "canonical_solution": "awk 'NR==5' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the content of line 5 of/etc/passwd\n\n* Incomplete Code:\nawk 'N[MASK]c/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'N[MASK]c/passwd"}
{"task_id": "AWK/25-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print line numbers for empty lines in/etc/passwd", "canonical_solution": " awk '{if($0 == \"\") {print NR}}' /etc/passwd ", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print line numbers for empty lines in/etc/passwd\n\n* Incomplete Code:\n awk '{if($[MASK]}}' /etc/passwd \n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": " awk '{if($[MASK]}}' /etc/passwd "}
{"task_id": "AWK/25-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print line numbers for empty lines in/etc/passwd", "canonical_solution": " awk '{if($0 == \"\") {print NR}}' /etc/passwd ", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print line numbers for empty lines in/etc/passwd\n\n* Incomplete Code:\n awk '{if([MASK]R}}' /etc/passwd \n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": " awk '{if([MASK]R}}' /etc/passwd "}
{"task_id": "AWK/26-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print line numbers for lines with byte count greater than 50 in/etc/passwd", "canonical_solution": " awk 'length($0) > 50 {print NR}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print line numbers for lines with byte count greater than 50 in/etc/passwd\n\n* Incomplete Code:\n awk 'length($0)[MASK]/etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": " awk 'length($0)[MASK]/etc/passwd"}
{"task_id": "AWK/26-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print line numbers for lines with byte count greater than 50 in/etc/passwd", "canonical_solution": " awk 'length($0) > 50 {print NR}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print line numbers for lines with byte count greater than 50 in/etc/passwd\n\n* Incomplete Code:\n awk 'leng[MASK] NR}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": " awk 'leng[MASK] NR}' /etc/passwd"}
{"task_id": "AWK/27-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print non empty lines in/etc/passwd", "canonical_solution": "awk '/^[^$]/' /etc/passwd ", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print non empty lines in/etc/passwd\n\n* Incomplete Code:\nawk '/[MASK]tc/passwd \n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '/[MASK]tc/passwd "}
{"task_id": "AWK/27-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print non empty lines in/etc/passwd", "canonical_solution": "awk '/^[^$]/' /etc/passwd ", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print non empty lines in/etc/passwd\n\n* Incomplete Code:\nawk '/^[[MASK]/passwd \n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '/^[[MASK]/passwd "}
{"task_id": "AWK/28-0-span", "prompt": "Using the awk command in Linux, complete the following task: Using regular expression matching to print non empty rows in/etc/passwd", "canonical_solution": "awk '/^[^$]/' /etc/passwd ", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using regular expression matching to print non empty rows in/etc/passwd\n\n* Incomplete Code:\nawk '/[MASK]tc/passwd \n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '/[MASK]tc/passwd "}
{"task_id": "AWK/28-1-span", "prompt": "Using the awk command in Linux, complete the following task: Using regular expression matching to print non empty rows in/etc/passwd", "canonical_solution": "awk '/^[^$]/' /etc/passwd ", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using regular expression matching to print non empty rows in/etc/passwd\n\n* Incomplete Code:\nawk [MASK]/etc/passwd \n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk [MASK]/etc/passwd "}
{"task_id": "AWK/29-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain root", "canonical_solution": "awk '!/root/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain root\n\n* Incomplete Code:\nawk '!/ro[MASK]passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '!/ro[MASK]passwd"}
{"task_id": "AWK/29-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain root", "canonical_solution": "awk '!/root/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain root\n\n* Incomplete Code:\nawk '!/r[MASK]/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '!/r[MASK]/passwd"}
{"task_id": "AWK/30-0-span", "prompt": "Using the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that contain root", "canonical_solution": "awk '/root/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that contain root\n\n* Incomplete Code:\nawk '[MASK]etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '[MASK]etc/passwd"}
{"task_id": "AWK/30-1-span", "prompt": "Using the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that contain root", "canonical_solution": "awk '/root/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that contain root\n\n* Incomplete Code:\nawk '/root[MASK]asswd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '/root[MASK]asswd"}
{"task_id": "AWK/31-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain ()", "canonical_solution": "awk '!/\\(\\)/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain ()\n\n* Incomplete Code:\nawk '![MASK]tc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '![MASK]tc/passwd"}
{"task_id": "AWK/31-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain ()", "canonical_solution": "awk '!/\\(\\)/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain ()\n\n* Incomplete Code:\nawk '[MASK]etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '[MASK]etc/passwd"}
{"task_id": "AWK/32-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain (", "canonical_solution": "awk '!/\\(/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain (\n\n* Incomplete Code:\nawk '![MASK]c/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '![MASK]c/passwd"}
{"task_id": "AWK/32-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain (", "canonical_solution": "awk '!/\\(/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain (\n\n* Incomplete Code:\nawk '!/\\(/'[MASK]swd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '!/\\(/'[MASK]swd"}
{"task_id": "AWK/33-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines without numbers in/etc/passwd", "canonical_solution": "awk '!/[0-9]/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines without numbers in/etc/passwd\n\n* Incomplete Code:\na[MASK]]/' /etc/passw\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "a[MASK]]/' /etc/passwd"}
{"task_id": "AWK/33-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines without numbers in/etc/passwd", "canonical_solution": "awk '!/[0-9]/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines without numbers in/etc/passwd\n\n* Incomplete Code:\nawk '!/[[MASK]c/passw\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '!/[[MASK]c/passwd"}
{"task_id": "AWK/34-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain numbers greater than 5000", "canonical_solution": "awk -F':' '{printit=1; for(i=1;i<=NF;i++) if($i~/^[0-9]+$/ && $i+0>5000) printit=0;} printit {print}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain numbers greater than 5000\n\n* Incomplete Code:\nawk -F':' '{printit=1; for(i=1;i<=NF;i++)[MASK]rintit {print}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{printit=1; for(i=1;i<=NF;i++)[MASK]rintit {print}' /etc/passwd"}
{"task_id": "AWK/34-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain numbers greater than 5000", "canonical_solution": "awk -F':' '{printit=1; for(i=1;i<=NF;i++) if($i~/^[0-9]+$/ && $i+0>5000) printit=0;} printit {print}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines in/etc/passwd that do not contain numbers greater than 5000\n\n* Incomplete Code:\nawk -F':' '{printit=1; for(i=1;i<=NF;i++) if($i~/^[MASK]rint}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{printit=1; for(i=1;i<=NF;i++) if($i~/^[MASK]rint}' /etc/passwd"}
{"task_id": "AWK/35-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines in/etc/passwd containing numbers greater than 5000", "canonical_solution": "awk -F':' '{for(i=1; i<=NF; i++) if($i ~ /^[0-9]+$/ && $i+0 > 5000) {print; break}}' /etc/passwd", "level": "middle", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines in/etc/passwd containing numbers greater than 5000\n\n* Incomplete Code:\nawk -F':' '{for(i=1; i<=NF; i++) if($i ~ /[MASK]k}}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{for(i=1; i<=NF; i++) if($i ~ /[MASK]k}}' /etc/passwd"}
{"task_id": "AWK/35-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print lines in/etc/passwd containing numbers greater than 5000", "canonical_solution": "awk -F':' '{for(i=1; i<=NF; i++) if($i ~ /^[0-9]+$/ && $i+0 > 5000) {print; break}}' /etc/passwd", "level": "middle", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print lines in/etc/passwd containing numbers greater than 5000\n\n* Incomplete Code:\nawk -F':' '{for(i=1; i<[MASK] 5000) {print; break}}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{for(i=1; i<[MASK] 5000) {print; break}}' /etc/passwd"}
{"task_id": "AWK/36-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd\n\n* Incomplete Code:\na[MASK]tc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "a[MASK]tc/passwd"}
{"task_id": "AWK/36-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word[MASK]        if (word_count[word] == 1)\n            print word\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word[MASK]        if (word_count[word] == 1)\n            print word\n}' /etc/passwd"}
{"task_id": "AWK/37-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print/etc/passwd as the first word on each line", "canonical_solution": "awk -F':' '{print $1}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print/etc/passwd as the first word on each line\n\n* Incomplete Code:\nawk -F':' '{pri[MASK]passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{pri[MASK]passwd"}
{"task_id": "AWK/37-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print/etc/passwd as the first word on each line", "canonical_solution": "awk -F':' '{print $1}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print/etc/passwd as the first word on each line\n\n* Incomplete Code:\nawk -F':' '{[MASK]tc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{[MASK]tc/passwd"}
{"task_id": "AWK/38-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the last word of each line in/etc/passwd", "canonical_solution": "awk -F':' '{print $NF}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the last word of each line in/etc/passwd\n\n* Incomplete Code:\naw[MASK]t $NF}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "aw[MASK]t $NF}' /etc/passwd"}
{"task_id": "AWK/38-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the last word of each line in/etc/passwd", "canonical_solution": "awk -F':' '{print $NF}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the last word of each line in/etc/passwd\n\n* Incomplete Code:\nawk -[MASK]NF}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -[MASK]NF}' /etc/passwd"}
{"task_id": "AWK/39-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the last two words of each line in/etc/passwd", "canonical_solution": "awk -F':' '{print $(NF-1) \":\" $NF}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the last two words of each line in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{[MASK]$NF}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{[MASK]$NF}' /etc/passwd"}
{"task_id": "AWK/39-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the last two words of each line in/etc/passwd", "canonical_solution": "awk -F':' '{print $(NF-1) \":\" $NF}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the last two words of each line in/etc/passwd\n\n* Incomplete Code:\nawk -[MASK]1) \":\" $NF}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -[MASK]1) \":\" $NF}' /etc/passwd"}
{"task_id": "AWK/40-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the first two words of each line in/etc/passwd", "canonical_solution": " awk -F':' '{print $1 \":\" $2}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the first two words of each line in/etc/passwd\n\n* Incomplete Code:\n awk -F':[MASK] $2}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": " awk -F':[MASK] $2}' /etc/passwd"}
{"task_id": "AWK/40-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the first two words of each line in/etc/passwd", "canonical_solution": " awk -F':' '{print $1 \":\" $2}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the first two words of each line in/etc/passwd\n\n* Incomplete Code:\n aw[MASK]$1 \":\" $2}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": " aw[MASK]$1 \":\" $2}' /etc/passwd"}
{"task_id": "AWK/41-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the number of words per line in/etc/passwd", "canonical_solution": "awk -F':' '{print NF}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the number of words per line in/etc/passwd\n\n* Incomplete Code:\nawk -F':' [MASK]/etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' [MASK]/etc/passwd"}
{"task_id": "AWK/41-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the number of words per line in/etc/passwd", "canonical_solution": "awk -F':' '{print NF}' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the number of words per line in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{[MASK]tc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{[MASK]tc/passwd"}
{"task_id": "AWK/42-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the number of digits per line in/etc/passwd", "canonical_solution": "awk '{num_digits = gsub(/[0-9]/,\"&\"); print num_digits}' /etc/passwd", "level": "middle", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the number of digits per line in/etc/passwd\n\n* Incomplete Code:\na[MASK]9]/,\"&\"); print num_digits}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "a[MASK]9]/,\"&\"); print num_digits}' /etc/passwd"}
{"task_id": "AWK/42-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the number of digits per line in/etc/passwd", "canonical_solution": "awk '{num_digits = gsub(/[0-9]/,\"&\"); print num_digits}' /etc/passwd", "level": "middle", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the number of digits per line in/etc/passwd\n\n* Incomplete Code:\nawk '{n[MASK]\"); print num_digits}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{n[MASK]\"); print num_digits}' /etc/passwd"}
{"task_id": "AWK/43-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd", "canonical_solution": "awk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd\n\n* Incomplete Code:\n[MASK]  if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]  if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd"}
{"task_id": "AWK/43-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd", "canonical_solution": "awk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    [MASK]igits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    [MASK]igits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd"}
{"task_id": "AWK/44-0-span", "prompt": "Using the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd", "canonical_solution": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_[MASK]{\n    if(line_number > 0) {\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_[MASK]{\n    if(line_number > 0) {\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd"}
{"task_id": "AWK/44-1-span", "prompt": "Using the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd", "canonical_solution": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub([MASK]d\";\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub([MASK]d\";\n    }\n}' /etc/passwd"}
{"task_id": "AWK/45-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print words containing r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words containing r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for [MASK]/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for [MASK]/passwd"}
{"task_id": "AWK/45-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print words containing r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words containing r in/etc/passwd\n\n* Incomplete Code:\nawk -F':'[MASK] <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':'[MASK] <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n}' /etc/passwd"}
{"task_id": "AWK/46-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print words without r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words without r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' [MASK]sswd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' [MASK]sswd"}
{"task_id": "AWK/46-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print words without r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words without r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '[MASK]/r/)\n            print $i\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '[MASK]/r/)\n            print $i\n    }\n}' /etc/passwd"}
{"task_id": "AWK/47-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the current user's username", "canonical_solution": "whoami | awk '{print $1}'", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the current user's username\n\n* Incomplete Code:\nwhoami | awk[MASK]1}'\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "whoami | awk[MASK]1}'"}
{"task_id": "AWK/47-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the current user's username", "canonical_solution": "whoami | awk '{print $1}'", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the current user's username\n\n* Incomplete Code:\nwhoami | [MASK]t $1}'\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "whoami | [MASK]t $1}'"}
{"task_id": "AWK/48-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line containing, in/etc/passwd", "canonical_solution": " awk '/,/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line containing, in/etc/passwd\n\n* Incomplete Code:\n awk '/[MASK]/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": " awk '/[MASK]/passwd"}
{"task_id": "AWK/48-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line containing, in/etc/passwd", "canonical_solution": " awk '/,/' /etc/passwd", "level": "easy", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line containing, in/etc/passwd\n\n* Incomplete Code:\n awk '[MASK]c/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": " awk '[MASK]c/passwd"}
{"task_id": "AWK/49-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd", "canonical_solution": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '{\n    line_length = [MASK]  if (line_length > max_length) {\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n    line_length = [MASK]  if (line_length > max_length) {\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd"}
{"task_id": "AWK/49-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd", "canonical_solution": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = li[MASK]x_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = li[MASK]x_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd"}
{"task_id": "AWK/50-0-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd", "canonical_solution": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_len[MASK]  if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_len[MASK]  if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd"}
{"task_id": "AWK/50-1-span", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd", "canonical_solution": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '\nBEGIN { m[MASK]Ensure the file was not empty\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '\nBEGIN { m[MASK]Ensure the file was not empty\n}' /etc/passwd"}
