{"task_id": "Markdown/7-0-single", "prompt": "Please generate a markdown code based on the following description: Create a sequential list, where the contents of the ordered list are\nFirst item\nSecond item\nThird item\nFourth item", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nPlease generate a markdown code based on the following description: Create a sequential list, where the contents of the ordered list are\nFirst item\nSecond item\nThird item\nFourth item\n\n* Incomplete Code:\n1. First item\n\n2. Second item\n\n3. Third item\n\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "canonical_solution": "1. First item\n\n2. Second item\n\n3. Third item\n\n4. Fourth item", "mask_code": "1. First item\n\n2. Second item\n\n3. Third item\n\n[MASK]"}
{"task_id": "Markdown/7-1-single", "prompt": "Please generate a markdown code based on the following description: Create a sequential list, where the contents of the ordered list are\nFirst item\nSecond item\nThird item\nFourth item", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nPlease generate a markdown code based on the following description: Create a sequential list, where the contents of the ordered list are\nFirst item\nSecond item\nThird item\nFourth item\n\n* Incomplete Code:\n1. First item\n\n[MASK]\n\n3. Third item\n\n4. Fourth item\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "canonical_solution": "1. First item\n\n2. Second item\n\n3. Third item\n\n4. Fourth item", "mask_code": "1. First item\n\n[MASK]\n\n3. Third item\n\n4. Fourth item"}
{"task_id": "Markdown/8-0-single", "prompt": "Please generate a markdown code based on the following description: Create an unordered list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nFourth item", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nPlease generate a markdown code based on the following description: Create an unordered list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nFourth item\n\n* Incomplete Code:\n- First item\n\n- Second item\n\n[MASK]\n\n- Fourth item\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "canonical_solution": "- First item\n\n- Second item\n\n- Third item\n\n- Fourth item", "mask_code": "- First item\n\n- Second item\n\n[MASK]\n\n- Fourth item"}
{"task_id": "Markdown/8-1-single", "prompt": "Please generate a markdown code based on the following description: Create an unordered list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nFourth item", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nPlease generate a markdown code based on the following description: Create an unordered list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nFourth item\n\n* Incomplete Code:\n[MASK]\n\n- Second item\n\n- Third item\n\n- Fourth item\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "canonical_solution": "- First item\n\n- Second item\n\n- Third item\n\n- Fourth item", "mask_code": "[MASK]\n\n- Second item\n\n- Third item\n\n- Fourth item"}
{"task_id": "Markdown/9-0-single", "prompt": "Please generate a markdown code based on the following description: Create a sequential list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nAt the same time, it is required to insert a paragraph in the middle of the sequence table and ensure the continuity of the list. The inserted content is\nI need to add another paragraph below the second list item\nInsert between Second item and Third item", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nPlease generate a markdown code based on the following description: Create a sequential list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nAt the same time, it is required to insert a paragraph in the middle of the sequence table and ensure the continuity of the list. The inserted content is\nI need to add another paragraph below the second list item\nInsert between Second item and Third item\n\n* Incomplete Code:\n[MASK]\n\n2. Second item\n\n   I need to add another paragraph below the second list item\n\n3. Third item\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "canonical_solution": "1. First item\n\n2. Second item\n\n   I need to add another paragraph below the second list item\n\n3. Third item", "mask_code": "[MASK]\n\n2. Second item\n\n   I need to add another paragraph below the second list item\n\n3. Third item"}
{"task_id": "Markdown/9-1-single", "prompt": "Please generate a markdown code based on the following description: Create a sequential list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nAt the same time, it is required to insert a paragraph in the middle of the sequence table and ensure the continuity of the list. The inserted content is\nI need to add another paragraph below the second list item\nInsert between Second item and Third item", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nPlease generate a markdown code based on the following description: Create a sequential list, where the contents of the unordered list are\nFirst item\nSecond item\nThird item\nAt the same time, it is required to insert a paragraph in the middle of the sequence table and ensure the continuity of the list. The inserted content is\nI need to add another paragraph below the second list item\nInsert between Second item and Third item\n\n* Incomplete Code:\n1. First item\n\n2. Second item\n\n   I need to add another paragraph below the second list item\n\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "middle", "canonical_solution": "1. First item\n\n2. Second item\n\n   I need to add another paragraph below the second list item\n\n3. Third item", "mask_code": "1. First item\n\n2. Second item\n\n   I need to add another paragraph below the second list item\n\n[MASK]"}
{"task_id": "Markdown/15-0-single", "prompt": "Please generate a markdown code based on the following description: Create a fence code block which contains the following content:\n{\n\"FirstName\": \"John\",\n\"LastName\": \"Smith\",\n\"Age\": 25\n}\nAnd achieve highlighting of JSON syntax", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nPlease generate a markdown code based on the following description: Create a fence code block which contains the following content:\n{\n\"FirstName\": \"John\",\n\"LastName\": \"Smith\",\n\"Age\": 25\n}\nAnd achieve highlighting of JSON syntax\n\n* Incomplete Code:\n[MASK]\n\n{\n\n  \"FirstName\": \"John\",\n\n  \"LastName\": \"Smith\",\n\n  \"Age\": 25\n\n}\n\n```\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "canonical_solution": "```json\n\n{\n\n  \"FirstName\": \"John\",\n\n  \"LastName\": \"Smith\",\n\n  \"Age\": 25\n\n}\n\n```", "mask_code": "[MASK]\n\n{\n\n  \"FirstName\": \"John\",\n\n  \"LastName\": \"Smith\",\n\n  \"Age\": 25\n\n}\n\n```"}
{"task_id": "Markdown/15-1-single", "prompt": "Please generate a markdown code based on the following description: Create a fence code block which contains the following content:\n{\n\"FirstName\": \"John\",\n\"LastName\": \"Smith\",\n\"Age\": 25\n}\nAnd achieve highlighting of JSON syntax", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nPlease generate a markdown code based on the following description: Create a fence code block which contains the following content:\n{\n\"FirstName\": \"John\",\n\"LastName\": \"Smith\",\n\"Age\": 25\n}\nAnd achieve highlighting of JSON syntax\n\n* Incomplete Code:\n```json\n\n{\n\n[MASK]\n\n  \"LastName\": \"Smith\",\n\n  \"Age\": 25\n\n}\n\n```\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "level": "easy", "canonical_solution": "```json\n\n{\n\n  \"FirstName\": \"John\",\n\n  \"LastName\": \"Smith\",\n\n  \"Age\": 25\n\n}\n\n```", "mask_code": "```json\n\n{\n\n[MASK]\n\n  \"LastName\": \"Smith\",\n\n  \"Age\": 25\n\n}\n\n```"}
{"task_id": "Markdown/16-0-single", "prompt": "Generate Markdown code according to the following requirements:Horizontal Rule: The document starts with a horizontal rule, created using three hyphens (---).\nFront Matter (YAML): Following the horizontal rule is a block of YAML front matter. YAML front matter is used to specify metadata for the document. In this context, it likely configures the settings or properties for an issue template on a platform like GitHub. The front matter is enclosed between two horizontal rule markers (---) at the start and end. It includes:\nname: Specifies the name of the template, set to \"漏洞反馈\" (translated as \"Bug Feedback\").\nabout: Provides a description of the template's purpose, \"报错或漏洞请使用这个模板创建\" (translated as \"Please use this template to report errors or bugs\").\ntitle: Sets a default title for issues created with this template, prefixed with \"[BUG]\".\nlabels: Assigns a default label, 'bug', to the issue.\nassignees: Leaves the assignees field empty, indicating no default assignee is set.\nHorizontal Rule: The document ends with another horizontal rule, identical to the one at the start, marking the end of the YAML front matter.", "level": "easy", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Horizontal Rule: The document starts with a horizontal rule, created using three hyphens (---).\nFront Matter (YAML): Following the horizontal rule is a block of YAML front matter. YAML front matter is used to specify metadata for the document. In this context, it likely configures the settings or properties for an issue template on a platform like GitHub. The front matter is enclosed between two horizontal rule markers (---) at the start and end. It includes:\nname: Specifies the name of the template, set to \"漏洞反馈\" (translated as \"Bug Feedback\").\nabout: Provides a description of the template's purpose, \"报错或漏洞请使用这个模板创建\" (translated as \"Please use this template to report errors or bugs\").\ntitle: Sets a default title for issues created with this template, prefixed with \"[BUG]\".\nlabels: Assigns a default label, 'bug', to the issue.\nassignees: Leaves the assignees field empty, indicating no default assignee is set.\nHorizontal Rule: The document ends with another horizontal rule, identical to the one at the start, marking the end of the YAML front matter.\n\n* Incomplete Code:\n---\n\nname: 漏洞反馈\n\nabout: 报错或漏洞请使用这个模板创建\n\ntitle: \"[BUG]\"\n\n[MASK]\n\nassignees: ''\n\n---\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "---\n\nname: 漏洞反馈\n\nabout: 报错或漏洞请使用这个模板创建\n\ntitle: \"[BUG]\"\n\nlabels: 'bug'\n\nassignees: ''\n\n---", "mask_code": "---\n\nname: 漏洞反馈\n\nabout: 报错或漏洞请使用这个模板创建\n\ntitle: \"[BUG]\"\n\n[MASK]\n\nassignees: ''\n\n---"}
{"task_id": "Markdown/16-1-single", "prompt": "Generate Markdown code according to the following requirements:Horizontal Rule: The document starts with a horizontal rule, created using three hyphens (---).\nFront Matter (YAML): Following the horizontal rule is a block of YAML front matter. YAML front matter is used to specify metadata for the document. In this context, it likely configures the settings or properties for an issue template on a platform like GitHub. The front matter is enclosed between two horizontal rule markers (---) at the start and end. It includes:\nname: Specifies the name of the template, set to \"漏洞反馈\" (translated as \"Bug Feedback\").\nabout: Provides a description of the template's purpose, \"报错或漏洞请使用这个模板创建\" (translated as \"Please use this template to report errors or bugs\").\ntitle: Sets a default title for issues created with this template, prefixed with \"[BUG]\".\nlabels: Assigns a default label, 'bug', to the issue.\nassignees: Leaves the assignees field empty, indicating no default assignee is set.\nHorizontal Rule: The document ends with another horizontal rule, identical to the one at the start, marking the end of the YAML front matter.", "level": "easy", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Horizontal Rule: The document starts with a horizontal rule, created using three hyphens (---).\nFront Matter (YAML): Following the horizontal rule is a block of YAML front matter. YAML front matter is used to specify metadata for the document. In this context, it likely configures the settings or properties for an issue template on a platform like GitHub. The front matter is enclosed between two horizontal rule markers (---) at the start and end. It includes:\nname: Specifies the name of the template, set to \"漏洞反馈\" (translated as \"Bug Feedback\").\nabout: Provides a description of the template's purpose, \"报错或漏洞请使用这个模板创建\" (translated as \"Please use this template to report errors or bugs\").\ntitle: Sets a default title for issues created with this template, prefixed with \"[BUG]\".\nlabels: Assigns a default label, 'bug', to the issue.\nassignees: Leaves the assignees field empty, indicating no default assignee is set.\nHorizontal Rule: The document ends with another horizontal rule, identical to the one at the start, marking the end of the YAML front matter.\n\n* Incomplete Code:\n---\n\nname: 漏洞反馈\n\nabout: 报错或漏洞请使用这个模板创建\n\ntitle: \"[BUG]\"\n\nlabels: 'bug'\n\n[MASK]\n\n---\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "---\n\nname: 漏洞反馈\n\nabout: 报错或漏洞请使用这个模板创建\n\ntitle: \"[BUG]\"\n\nlabels: 'bug'\n\nassignees: ''\n\n---", "mask_code": "---\n\nname: 漏洞反馈\n\nabout: 报错或漏洞请使用这个模板创建\n\ntitle: \"[BUG]\"\n\nlabels: 'bug'\n\n[MASK]\n\n---"}
{"task_id": "Markdown/25-0-single", "prompt": "Generate Markdown code according to the following requirements:content consists of an unordered list, each item of which includes a topic or action followed by a linked issue number. The specifics of the format are as follows:\nThe list is initiated with asterisks (*), which are used to mark each item in an unordered list in Markdown. This format creates a bulleted list to organize the items visually.\nEach list item begins with a descriptive phrase or action item, such as \"adopt a charter\", \"release and versioning strategy\", \"simpler stream creation\", and \"proposal: deprecate implicit flowing of streams\". These phrases describe the topic or action proposed or discussed, providing a clear and concise summary of each item's content.\nFollowing the descriptive phrase in each list item, there is an issue number encapsulated in square brackets ([]), which is directly linked to a URL enclosed in parentheses (()). This syntax creates a clickable hyperlink with the issue number as the link text, leading to the corresponding issue on GitHub. The issue numbers and URLs are specific to items in the iojs/readable-stream repository on GitHub, such as [#105](https://github.com/iojs/readable-stream/issues/105).", "level": "middle", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:content consists of an unordered list, each item of which includes a topic or action followed by a linked issue number. The specifics of the format are as follows:\nThe list is initiated with asterisks (*), which are used to mark each item in an unordered list in Markdown. This format creates a bulleted list to organize the items visually.\nEach list item begins with a descriptive phrase or action item, such as \"adopt a charter\", \"release and versioning strategy\", \"simpler stream creation\", and \"proposal: deprecate implicit flowing of streams\". These phrases describe the topic or action proposed or discussed, providing a clear and concise summary of each item's content.\nFollowing the descriptive phrase in each list item, there is an issue number encapsulated in square brackets ([]), which is directly linked to a URL enclosed in parentheses (()). This syntax creates a clickable hyperlink with the issue number as the link text, leading to the corresponding issue on GitHub. The issue numbers and URLs are specific to items in the iojs/readable-stream repository on GitHub, such as [#105](https://github.com/iojs/readable-stream/issues/105).\n\n* Incomplete Code:\n* adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105)\n\n* release and versioning strategy [#101](https://github.com/iojs/readable-stream/issues/101)\n\n* simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102)\n\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "* adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105)\n\n* release and versioning strategy [#101](https://github.com/iojs/readable-stream/issues/101)\n\n* simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102)\n\n* proposal: deprecate implicit flowing of streams [#99](https://github.com/iojs/readable-stream/issues/99)", "mask_code": "* adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105)\n\n* release and versioning strategy [#101](https://github.com/iojs/readable-stream/issues/101)\n\n* simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102)\n\n[MASK]"}
{"task_id": "Markdown/25-1-single", "prompt": "Generate Markdown code according to the following requirements:content consists of an unordered list, each item of which includes a topic or action followed by a linked issue number. The specifics of the format are as follows:\nThe list is initiated with asterisks (*), which are used to mark each item in an unordered list in Markdown. This format creates a bulleted list to organize the items visually.\nEach list item begins with a descriptive phrase or action item, such as \"adopt a charter\", \"release and versioning strategy\", \"simpler stream creation\", and \"proposal: deprecate implicit flowing of streams\". These phrases describe the topic or action proposed or discussed, providing a clear and concise summary of each item's content.\nFollowing the descriptive phrase in each list item, there is an issue number encapsulated in square brackets ([]), which is directly linked to a URL enclosed in parentheses (()). This syntax creates a clickable hyperlink with the issue number as the link text, leading to the corresponding issue on GitHub. The issue numbers and URLs are specific to items in the iojs/readable-stream repository on GitHub, such as [#105](https://github.com/iojs/readable-stream/issues/105).", "level": "middle", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:content consists of an unordered list, each item of which includes a topic or action followed by a linked issue number. The specifics of the format are as follows:\nThe list is initiated with asterisks (*), which are used to mark each item in an unordered list in Markdown. This format creates a bulleted list to organize the items visually.\nEach list item begins with a descriptive phrase or action item, such as \"adopt a charter\", \"release and versioning strategy\", \"simpler stream creation\", and \"proposal: deprecate implicit flowing of streams\". These phrases describe the topic or action proposed or discussed, providing a clear and concise summary of each item's content.\nFollowing the descriptive phrase in each list item, there is an issue number encapsulated in square brackets ([]), which is directly linked to a URL enclosed in parentheses (()). This syntax creates a clickable hyperlink with the issue number as the link text, leading to the corresponding issue on GitHub. The issue numbers and URLs are specific to items in the iojs/readable-stream repository on GitHub, such as [#105](https://github.com/iojs/readable-stream/issues/105).\n\n* Incomplete Code:\n* adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105)\n\n[MASK]\n\n* simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102)\n\n* proposal: deprecate implicit flowing of streams [#99](https://github.com/iojs/readable-stream/issues/99)\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "* adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105)\n\n* release and versioning strategy [#101](https://github.com/iojs/readable-stream/issues/101)\n\n* simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102)\n\n* proposal: deprecate implicit flowing of streams [#99](https://github.com/iojs/readable-stream/issues/99)", "mask_code": "* adopt a charter [#105](https://github.com/iojs/readable-stream/issues/105)\n\n[MASK]\n\n* simpler stream creation [#102](https://github.com/iojs/readable-stream/issues/102)\n\n* proposal: deprecate implicit flowing of streams [#99](https://github.com/iojs/readable-stream/issues/99)"}
{"task_id": "Markdown/26-0-single", "prompt": "Generate Markdown code according to the following requirements:content begins with a level 3 heading, followed by an unordered list and a concluding line of text. The format specifics are as follows:\nLevel 3 Heading: The document starts with a level 3 heading, indicated by three hash symbols (###). The heading is a question, \"What versioning scheme should be adopted?\", serving as a topic or section title.\nUnordered List: Immediately following the heading, there is an unordered list, each item of which begins with an asterisk (*). This list includes:\nContributions or statements attributed to specific individuals or groups. Each item starts with a name or identifier (e.g., \"group:\", \"domenic+group:\", \"mikeal:\", \"mikeal+domenic:\"), followed by a statement or opinion related to the versioning scheme topic.\nThese statements vary in content, discussing versioning preferences and strategies, such as adopting a specific version number, pulling in patches, suggesting versioning practices for io.js, and coordinating with the Technical Committee (TC) regarding changes.\nConcluding Line of Text: After the list, there is a line of text, \"simpler stream creation\", which seems to be a statement or topic on its own. This line is not part of the unordered list and does not have any specific Markdown formatting, such as a list marker or heading style, making it stand out from the structured list above.", "level": "hard", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:content begins with a level 3 heading, followed by an unordered list and a concluding line of text. The format specifics are as follows:\nLevel 3 Heading: The document starts with a level 3 heading, indicated by three hash symbols (###). The heading is a question, \"What versioning scheme should be adopted?\", serving as a topic or section title.\nUnordered List: Immediately following the heading, there is an unordered list, each item of which begins with an asterisk (*). This list includes:\nContributions or statements attributed to specific individuals or groups. Each item starts with a name or identifier (e.g., \"group:\", \"domenic+group:\", \"mikeal:\", \"mikeal+domenic:\"), followed by a statement or opinion related to the versioning scheme topic.\nThese statements vary in content, discussing versioning preferences and strategies, such as adopting a specific version number, pulling in patches, suggesting versioning practices for io.js, and coordinating with the Technical Committee (TC) regarding changes.\nConcluding Line of Text: After the list, there is a line of text, \"simpler stream creation\", which seems to be a statement or topic on its own. This line is not part of the unordered list and does not have any specific Markdown formatting, such as a list marker or heading style, making it stand out from the structured list above.\n\n* Incomplete Code:\n[MASK]\n\n* group: +1’s 3.0.0\n\n* domenic+group: pulling in patches from other sources where appropriate\n\n* mikeal: version independently, suggesting versions for io.js\n\n* mikeal+domenic: work with TC to notify in advance of changes\n\nsimpler stream creation\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "### What versioning scheme should be adopted?\n\n* group: +1’s 3.0.0\n\n* domenic+group: pulling in patches from other sources where appropriate\n\n* mikeal: version independently, suggesting versions for io.js\n\n* mikeal+domenic: work with TC to notify in advance of changes\n\nsimpler stream creation", "mask_code": "[MASK]\n\n* group: +1’s 3.0.0\n\n* domenic+group: pulling in patches from other sources where appropriate\n\n* mikeal: version independently, suggesting versions for io.js\n\n* mikeal+domenic: work with TC to notify in advance of changes\n\nsimpler stream creation"}
{"task_id": "Markdown/26-1-single", "prompt": "Generate Markdown code according to the following requirements:content begins with a level 3 heading, followed by an unordered list and a concluding line of text. The format specifics are as follows:\nLevel 3 Heading: The document starts with a level 3 heading, indicated by three hash symbols (###). The heading is a question, \"What versioning scheme should be adopted?\", serving as a topic or section title.\nUnordered List: Immediately following the heading, there is an unordered list, each item of which begins with an asterisk (*). This list includes:\nContributions or statements attributed to specific individuals or groups. Each item starts with a name or identifier (e.g., \"group:\", \"domenic+group:\", \"mikeal:\", \"mikeal+domenic:\"), followed by a statement or opinion related to the versioning scheme topic.\nThese statements vary in content, discussing versioning preferences and strategies, such as adopting a specific version number, pulling in patches, suggesting versioning practices for io.js, and coordinating with the Technical Committee (TC) regarding changes.\nConcluding Line of Text: After the list, there is a line of text, \"simpler stream creation\", which seems to be a statement or topic on its own. This line is not part of the unordered list and does not have any specific Markdown formatting, such as a list marker or heading style, making it stand out from the structured list above.", "level": "hard", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:content begins with a level 3 heading, followed by an unordered list and a concluding line of text. The format specifics are as follows:\nLevel 3 Heading: The document starts with a level 3 heading, indicated by three hash symbols (###). The heading is a question, \"What versioning scheme should be adopted?\", serving as a topic or section title.\nUnordered List: Immediately following the heading, there is an unordered list, each item of which begins with an asterisk (*). This list includes:\nContributions or statements attributed to specific individuals or groups. Each item starts with a name or identifier (e.g., \"group:\", \"domenic+group:\", \"mikeal:\", \"mikeal+domenic:\"), followed by a statement or opinion related to the versioning scheme topic.\nThese statements vary in content, discussing versioning preferences and strategies, such as adopting a specific version number, pulling in patches, suggesting versioning practices for io.js, and coordinating with the Technical Committee (TC) regarding changes.\nConcluding Line of Text: After the list, there is a line of text, \"simpler stream creation\", which seems to be a statement or topic on its own. This line is not part of the unordered list and does not have any specific Markdown formatting, such as a list marker or heading style, making it stand out from the structured list above.\n\n* Incomplete Code:\n### What versioning scheme should be adopted?\n\n* group: +1’s 3.0.0\n\n[MASK]\n\n* mikeal: version independently, suggesting versions for io.js\n\n* mikeal+domenic: work with TC to notify in advance of changes\n\nsimpler stream creation\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "### What versioning scheme should be adopted?\n\n* group: +1’s 3.0.0\n\n* domenic+group: pulling in patches from other sources where appropriate\n\n* mikeal: version independently, suggesting versions for io.js\n\n* mikeal+domenic: work with TC to notify in advance of changes\n\nsimpler stream creation", "mask_code": "### What versioning scheme should be adopted?\n\n* group: +1’s 3.0.0\n\n[MASK]\n\n* mikeal: version independently, suggesting versions for io.js\n\n* mikeal+domenic: work with TC to notify in advance of changes\n\nsimpler stream creation"}
{"task_id": "Markdown/27-0-single", "prompt": "Generate Markdown code according to the following requirements:content is organized with a bolded introductory phrase followed by an unordered list that includes specific tasks and a highlighted individual's name. Here's the breakdown:\nBolded Introductory Phrase: The document starts with the phrase \"action items:\" which is emphasized using double asterisks (**) on both sides. This creates a bold effect, drawing attention to the section title or key theme of the list that follows.\nUnordered List: Below the bolded phrase, there's an unordered list, indicated by asterisks (*). This list outlines various tasks or action items, each presented as a bullet point. The format includes straightforward task descriptions, suggesting actions to be taken, such as asking individuals for specific contributions or implementing new features.\nHighlighted Individual's Name: Within the list, one item specifically mentions an individual, \"chris\", whose name is also bolded using double asterisks. This emphasizes the person's responsibility or involvement with the task, distinguishing it from other items in the list.\nTasks Description: The tasks vary in nature and are described directly without additional formatting except for the bolded name. They include requests for information or action from specific people or groups, as well as suggestions for adding new features or documentation sections.", "level": "hard", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:content is organized with a bolded introductory phrase followed by an unordered list that includes specific tasks and a highlighted individual's name. Here's the breakdown:\nBolded Introductory Phrase: The document starts with the phrase \"action items:\" which is emphasized using double asterisks (**) on both sides. This creates a bold effect, drawing attention to the section title or key theme of the list that follows.\nUnordered List: Below the bolded phrase, there's an unordered list, indicated by asterisks (*). This list outlines various tasks or action items, each presented as a bullet point. The format includes straightforward task descriptions, suggesting actions to be taken, such as asking individuals for specific contributions or implementing new features.\nHighlighted Individual's Name: Within the list, one item specifically mentions an individual, \"chris\", whose name is also bolded using double asterisks. This emphasizes the person's responsibility or involvement with the task, distinguishing it from other items in the list.\nTasks Description: The tasks vary in nature and are described directly without additional formatting except for the bolded name. They include requests for information or action from specific people or groups, as well as suggestions for adding new features or documentation sections.\n\n* Incomplete Code:\n[MASK]\n\n* ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream)\n\n* ask rod/build for infrastructure\n\n* **chris**: explore the “flow on data” approach\n\n* add isPaused/isFlowing\n\n* add new docs section\n\n* move isPaused to that section\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "**action items:**\n\n* ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream)\n\n* ask rod/build for infrastructure\n\n* **chris**: explore the “flow on data” approach\n\n* add isPaused/isFlowing\n\n* add new docs section\n\n* move isPaused to that section", "mask_code": "[MASK]\n\n* ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream)\n\n* ask rod/build for infrastructure\n\n* **chris**: explore the “flow on data” approach\n\n* add isPaused/isFlowing\n\n* add new docs section\n\n* move isPaused to that section"}
{"task_id": "Markdown/27-1-single", "prompt": "Generate Markdown code according to the following requirements:content is organized with a bolded introductory phrase followed by an unordered list that includes specific tasks and a highlighted individual's name. Here's the breakdown:\nBolded Introductory Phrase: The document starts with the phrase \"action items:\" which is emphasized using double asterisks (**) on both sides. This creates a bold effect, drawing attention to the section title or key theme of the list that follows.\nUnordered List: Below the bolded phrase, there's an unordered list, indicated by asterisks (*). This list outlines various tasks or action items, each presented as a bullet point. The format includes straightforward task descriptions, suggesting actions to be taken, such as asking individuals for specific contributions or implementing new features.\nHighlighted Individual's Name: Within the list, one item specifically mentions an individual, \"chris\", whose name is also bolded using double asterisks. This emphasizes the person's responsibility or involvement with the task, distinguishing it from other items in the list.\nTasks Description: The tasks vary in nature and are described directly without additional formatting except for the bolded name. They include requests for information or action from specific people or groups, as well as suggestions for adding new features or documentation sections.", "level": "hard", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:content is organized with a bolded introductory phrase followed by an unordered list that includes specific tasks and a highlighted individual's name. Here's the breakdown:\nBolded Introductory Phrase: The document starts with the phrase \"action items:\" which is emphasized using double asterisks (**) on both sides. This creates a bold effect, drawing attention to the section title or key theme of the list that follows.\nUnordered List: Below the bolded phrase, there's an unordered list, indicated by asterisks (*). This list outlines various tasks or action items, each presented as a bullet point. The format includes straightforward task descriptions, suggesting actions to be taken, such as asking individuals for specific contributions or implementing new features.\nHighlighted Individual's Name: Within the list, one item specifically mentions an individual, \"chris\", whose name is also bolded using double asterisks. This emphasizes the person's responsibility or involvement with the task, distinguishing it from other items in the list.\nTasks Description: The tasks vary in nature and are described directly without additional formatting except for the bolded name. They include requests for information or action from specific people or groups, as well as suggestions for adding new features or documentation sections.\n\n* Incomplete Code:\n**action items:**\n\n* ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream)\n\n* ask rod/build for infrastructure\n\n* **chris**: explore the “flow on data” approach\n\n[MASK]\n\n* add new docs section\n\n* move isPaused to that section\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "**action items:**\n\n* ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream)\n\n* ask rod/build for infrastructure\n\n* **chris**: explore the “flow on data” approach\n\n* add isPaused/isFlowing\n\n* add new docs section\n\n* move isPaused to that section", "mask_code": "**action items:**\n\n* ask isaac for ability to list packages by what public io.js APIs they use (esp. Stream)\n\n* ask rod/build for infrastructure\n\n* **chris**: explore the “flow on data” approach\n\n[MASK]\n\n* add new docs section\n\n* move isPaused to that section"}
{"task_id": "Markdown/29-0-single", "prompt": "Generate Markdown code according to the following requirements: content is organized into sections with headings and includes linked list items. Here's the detailed breakdown:\nLevel 2 Heading: The document begins with \"Accessibility guidelines\" as a level 2 heading, indicated by two hash symbols (##). This serves as the title for the first section, suggesting it will cover guidelines related to accessibility.\nLinked List Item under Level 2 Heading: Directly under the level 2 heading, there's a bulleted list item that includes a link. The link text is \"WCAG 1.1.1\" and the URL points to a specific page on the W3.org website about understanding non-text content. This is formatted as a Markdown link, where the link text is enclosed in square brackets ([]) and the URL is enclosed in parentheses (()).\nLevel 3 Heading: Following the first section, there's a level 3 heading titled \"Resources\", indicated by three hash symbols (###). This marks the beginning of a new section focused on providing additional materials or references.\nLinked List Item under Level 3 Heading: Under the level 3 heading, there's another bulleted list item with a link. The link text here is \"Léonie Watson, Accessible Emoji\", which points to an article on tink.uk about accessible emoji. Similar to the first link, the text is enclosed in square brackets and the URL in parentheses, forming a clickable hyperlink in Markdown format.", "level": "easy", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements: content is organized into sections with headings and includes linked list items. Here's the detailed breakdown:\nLevel 2 Heading: The document begins with \"Accessibility guidelines\" as a level 2 heading, indicated by two hash symbols (##). This serves as the title for the first section, suggesting it will cover guidelines related to accessibility.\nLinked List Item under Level 2 Heading: Directly under the level 2 heading, there's a bulleted list item that includes a link. The link text is \"WCAG 1.1.1\" and the URL points to a specific page on the W3.org website about understanding non-text content. This is formatted as a Markdown link, where the link text is enclosed in square brackets ([]) and the URL is enclosed in parentheses (()).\nLevel 3 Heading: Following the first section, there's a level 3 heading titled \"Resources\", indicated by three hash symbols (###). This marks the beginning of a new section focused on providing additional materials or references.\nLinked List Item under Level 3 Heading: Under the level 3 heading, there's another bulleted list item with a link. The link text here is \"Léonie Watson, Accessible Emoji\", which points to an article on tink.uk about accessible emoji. Similar to the first link, the text is enclosed in square brackets and the URL in parentheses, forming a clickable hyperlink in Markdown format.\n\n* Incomplete Code:\n[MASK]\n\n- [WCAG 1.1.1](https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html)\n\n### Resources\n\n- [Léonie Watson, Accessible Emoji](https://tink.uk/accessible-emoji/)\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "## Accessibility guidelines\n\n- [WCAG 1.1.1](https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html)\n\n### Resources\n\n- [Léonie Watson, Accessible Emoji](https://tink.uk/accessible-emoji/)", "mask_code": "[MASK]\n\n- [WCAG 1.1.1](https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html)\n\n### Resources\n\n- [Léonie Watson, Accessible Emoji](https://tink.uk/accessible-emoji/)"}
{"task_id": "Markdown/29-1-single", "prompt": "Generate Markdown code according to the following requirements: content is organized into sections with headings and includes linked list items. Here's the detailed breakdown:\nLevel 2 Heading: The document begins with \"Accessibility guidelines\" as a level 2 heading, indicated by two hash symbols (##). This serves as the title for the first section, suggesting it will cover guidelines related to accessibility.\nLinked List Item under Level 2 Heading: Directly under the level 2 heading, there's a bulleted list item that includes a link. The link text is \"WCAG 1.1.1\" and the URL points to a specific page on the W3.org website about understanding non-text content. This is formatted as a Markdown link, where the link text is enclosed in square brackets ([]) and the URL is enclosed in parentheses (()).\nLevel 3 Heading: Following the first section, there's a level 3 heading titled \"Resources\", indicated by three hash symbols (###). This marks the beginning of a new section focused on providing additional materials or references.\nLinked List Item under Level 3 Heading: Under the level 3 heading, there's another bulleted list item with a link. The link text here is \"Léonie Watson, Accessible Emoji\", which points to an article on tink.uk about accessible emoji. Similar to the first link, the text is enclosed in square brackets and the URL in parentheses, forming a clickable hyperlink in Markdown format.", "level": "easy", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements: content is organized into sections with headings and includes linked list items. Here's the detailed breakdown:\nLevel 2 Heading: The document begins with \"Accessibility guidelines\" as a level 2 heading, indicated by two hash symbols (##). This serves as the title for the first section, suggesting it will cover guidelines related to accessibility.\nLinked List Item under Level 2 Heading: Directly under the level 2 heading, there's a bulleted list item that includes a link. The link text is \"WCAG 1.1.1\" and the URL points to a specific page on the W3.org website about understanding non-text content. This is formatted as a Markdown link, where the link text is enclosed in square brackets ([]) and the URL is enclosed in parentheses (()).\nLevel 3 Heading: Following the first section, there's a level 3 heading titled \"Resources\", indicated by three hash symbols (###). This marks the beginning of a new section focused on providing additional materials or references.\nLinked List Item under Level 3 Heading: Under the level 3 heading, there's another bulleted list item with a link. The link text here is \"Léonie Watson, Accessible Emoji\", which points to an article on tink.uk about accessible emoji. Similar to the first link, the text is enclosed in square brackets and the URL in parentheses, forming a clickable hyperlink in Markdown format.\n\n* Incomplete Code:\n## Accessibility guidelines\n\n[MASK]\n\n### Resources\n\n- [Léonie Watson, Accessible Emoji](https://tink.uk/accessible-emoji/)\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "## Accessibility guidelines\n\n- [WCAG 1.1.1](https://www.w3.org/WAI/WCAG21/Understanding/non-text-content.html)\n\n### Resources\n\n- [Léonie Watson, Accessible Emoji](https://tink.uk/accessible-emoji/)", "mask_code": "## Accessibility guidelines\n\n[MASK]\n\n### Resources\n\n- [Léonie Watson, Accessible Emoji](https://tink.uk/accessible-emoji/)"}
{"task_id": "Markdown/33-0-single", "prompt": "Generate Markdown code according to the following requirements:Begins with a third-level heading titled \"Resources\".\nFollows with an unordered list of three items, each being a hyperlink to an external resource:\nThe first link's text is \"Chrome Audit Rules, AX_ARIA_01\" and points to a GitHub page within the GoogleChrome organization's accessibility-developer-tools wiki, specifically the Audit Rules section with an anchor to #ax_aria_01.\nThe second link's text is \"DPUB-ARIA roles\" and leads to a W3C document for DPUB-ARIA 1.0.\nThe third link's text is \"MDN: Using ARIA: Roles, states, and properties\" and directs to a Mozilla Developer Network (MDN) page about using ARIA techniques.", "level": "easy", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Begins with a third-level heading titled \"Resources\".\nFollows with an unordered list of three items, each being a hyperlink to an external resource:\nThe first link's text is \"Chrome Audit Rules, AX_ARIA_01\" and points to a GitHub page within the GoogleChrome organization's accessibility-developer-tools wiki, specifically the Audit Rules section with an anchor to #ax_aria_01.\nThe second link's text is \"DPUB-ARIA roles\" and leads to a W3C document for DPUB-ARIA 1.0.\nThe third link's text is \"MDN: Using ARIA: Roles, states, and properties\" and directs to a Mozilla Developer Network (MDN) page about using ARIA techniques.\n\n* Incomplete Code:\n### Resources\n\n- [Chrome Audit Rules, AX_ARIA_01](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_aria_01)\n\n- [DPUB-ARIA roles](https://www.w3.org/TR/dpub-aria-1.0/)\n\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "### Resources\n\n- [Chrome Audit Rules, AX_ARIA_01](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_aria_01)\n\n- [DPUB-ARIA roles](https://www.w3.org/TR/dpub-aria-1.0/)\n\n- [MDN: Using ARIA: Roles, states, and properties](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques)", "mask_code": "### Resources\n\n- [Chrome Audit Rules, AX_ARIA_01](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_aria_01)\n\n- [DPUB-ARIA roles](https://www.w3.org/TR/dpub-aria-1.0/)\n\n[MASK]"}
{"task_id": "Markdown/33-1-single", "prompt": "Generate Markdown code according to the following requirements:Begins with a third-level heading titled \"Resources\".\nFollows with an unordered list of three items, each being a hyperlink to an external resource:\nThe first link's text is \"Chrome Audit Rules, AX_ARIA_01\" and points to a GitHub page within the GoogleChrome organization's accessibility-developer-tools wiki, specifically the Audit Rules section with an anchor to #ax_aria_01.\nThe second link's text is \"DPUB-ARIA roles\" and leads to a W3C document for DPUB-ARIA 1.0.\nThe third link's text is \"MDN: Using ARIA: Roles, states, and properties\" and directs to a Mozilla Developer Network (MDN) page about using ARIA techniques.", "level": "easy", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Begins with a third-level heading titled \"Resources\".\nFollows with an unordered list of three items, each being a hyperlink to an external resource:\nThe first link's text is \"Chrome Audit Rules, AX_ARIA_01\" and points to a GitHub page within the GoogleChrome organization's accessibility-developer-tools wiki, specifically the Audit Rules section with an anchor to #ax_aria_01.\nThe second link's text is \"DPUB-ARIA roles\" and leads to a W3C document for DPUB-ARIA 1.0.\nThe third link's text is \"MDN: Using ARIA: Roles, states, and properties\" and directs to a Mozilla Developer Network (MDN) page about using ARIA techniques.\n\n* Incomplete Code:\n[MASK]\n\n- [Chrome Audit Rules, AX_ARIA_01](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_aria_01)\n\n- [DPUB-ARIA roles](https://www.w3.org/TR/dpub-aria-1.0/)\n\n- [MDN: Using ARIA: Roles, states, and properties](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques)\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "### Resources\n\n- [Chrome Audit Rules, AX_ARIA_01](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_aria_01)\n\n- [DPUB-ARIA roles](https://www.w3.org/TR/dpub-aria-1.0/)\n\n- [MDN: Using ARIA: Roles, states, and properties](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques)", "mask_code": "[MASK]\n\n- [Chrome Audit Rules, AX_ARIA_01](https://github.com/GoogleChrome/accessibility-developer-tools/wiki/Audit-Rules#ax_aria_01)\n\n- [DPUB-ARIA roles](https://www.w3.org/TR/dpub-aria-1.0/)\n\n- [MDN: Using ARIA: Roles, states, and properties](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques)"}
{"task_id": "Markdown/34-0-single", "prompt": "Generate Markdown code according to the following requirements:Starts with a third-level heading: \"Confirming on items\".\nFollowed by a paragraph explaining that items can be validated using a specific option, referred to as ensureItem (highlighted as inline code).\nIntroduces an unordered list with two items, specifying the outcomes of using the ensureItem option:\nThe first item mentions the return of a new instance of an array with coerced item values.\nThe second item describes that the error message will list up to three items which are invalid.", "level": "hard", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Starts with a third-level heading: \"Confirming on items\".\nFollowed by a paragraph explaining that items can be validated using a specific option, referred to as ensureItem (highlighted as inline code).\nIntroduces an unordered list with two items, specifying the outcomes of using the ensureItem option:\nThe first item mentions the return of a new instance of an array with coerced item values.\nThe second item describes that the error message will list up to three items which are invalid.\n\n* Incomplete Code:\n### Confirming on items\n\nItems can be validated using the specific option `ensureItem`. \n\n- The return of a new instance of an array with coerced item values.\n\n[MASK]\n\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "### Confirming on items\n\nItems can be validated using the specific option `ensureItem`. \n\n- The return of a new instance of an array with coerced item values.\n\n- The error message will list up to three items which are invalid.\n", "mask_code": "### Confirming on items\n\nItems can be validated using the specific option `ensureItem`. \n\n- The return of a new instance of an array with coerced item values.\n\n[MASK]\n"}
{"task_id": "Markdown/34-1-single", "prompt": "Generate Markdown code according to the following requirements:Starts with a third-level heading: \"Confirming on items\".\nFollowed by a paragraph explaining that items can be validated using a specific option, referred to as ensureItem (highlighted as inline code).\nIntroduces an unordered list with two items, specifying the outcomes of using the ensureItem option:\nThe first item mentions the return of a new instance of an array with coerced item values.\nThe second item describes that the error message will list up to three items which are invalid.", "level": "hard", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Starts with a third-level heading: \"Confirming on items\".\nFollowed by a paragraph explaining that items can be validated using a specific option, referred to as ensureItem (highlighted as inline code).\nIntroduces an unordered list with two items, specifying the outcomes of using the ensureItem option:\nThe first item mentions the return of a new instance of an array with coerced item values.\nThe second item describes that the error message will list up to three items which are invalid.\n\n* Incomplete Code:\n### Confirming on items\n\n[MASK]\n\n- The return of a new instance of an array with coerced item values.\n\n- The error message will list up to three items which are invalid.\n\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "### Confirming on items\n\nItems can be validated using the specific option `ensureItem`. \n\n- The return of a new instance of an array with coerced item values.\n\n- The error message will list up to three items which are invalid.\n", "mask_code": "### Confirming on items\n\n[MASK]\n\n- The return of a new instance of an array with coerced item values.\n\n- The error message will list up to three items which are invalid.\n"}
{"task_id": "Markdown/38-0-single", "prompt": "Generate Markdown code according to the following requirements:Begins with a level 1 heading: \"Changelog\".\nFollows with a level 2 heading for version \"v1.1.0\".\nUnder the version heading, there are two list items:\nThe first item starts with \"test:\" and describes a requirement handled by mocha.\nThe second item starts with \"package:\" and mentions the update to coffeescript 2 and the use of semver tilde.", "level": "easy", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Begins with a level 1 heading: \"Changelog\".\nFollows with a level 2 heading for version \"v1.1.0\".\nUnder the version heading, there are two list items:\nThe first item starts with \"test:\" and describes a requirement handled by mocha.\nThe second item starts with \"package:\" and mentions the update to coffeescript 2 and the use of semver tilde.\n\n* Incomplete Code:\n# Changelog\n\n## v1.1.0\n\n[MASK]\n\n* package: coffeescript 2 and use semver tilde.\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "# Changelog\n\n## v1.1.0\n\n* test: should require handled by mocha.\n\n* package: coffeescript 2 and use semver tilde.", "mask_code": "# Changelog\n\n## v1.1.0\n\n[MASK]\n\n* package: coffeescript 2 and use semver tilde."}
{"task_id": "Markdown/38-1-single", "prompt": "Generate Markdown code according to the following requirements:Begins with a level 1 heading: \"Changelog\".\nFollows with a level 2 heading for version \"v1.1.0\".\nUnder the version heading, there are two list items:\nThe first item starts with \"test:\" and describes a requirement handled by mocha.\nThe second item starts with \"package:\" and mentions the update to coffeescript 2 and the use of semver tilde.", "level": "easy", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Begins with a level 1 heading: \"Changelog\".\nFollows with a level 2 heading for version \"v1.1.0\".\nUnder the version heading, there are two list items:\nThe first item starts with \"test:\" and describes a requirement handled by mocha.\nThe second item starts with \"package:\" and mentions the update to coffeescript 2 and the use of semver tilde.\n\n* Incomplete Code:\n# Changelog\n\n[MASK]\n\n* test: should require handled by mocha.\n\n* package: coffeescript 2 and use semver tilde.\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "# Changelog\n\n## v1.1.0\n\n* test: should require handled by mocha.\n\n* package: coffeescript 2 and use semver tilde.", "mask_code": "# Changelog\n\n[MASK]\n\n* test: should require handled by mocha.\n\n* package: coffeescript 2 and use semver tilde."}
{"task_id": "Markdown/43-0-single", "prompt": "Generate Markdown code according to the following requirements:Begins with a level 2 heading that includes a version number in square brackets [1.0.0], followed by a hyphen -, and then a date 2018-11-05.\nThe heading is followed by an unordered list with four items describing the updates:\nThe first item mentions the addition of a new option: \"adds .onMatch option\".\nThe second item notes improvements to a method: \"improvements to .scan method\".\nThe third item highlights general enhancements: \"numerous improvements and optimizations for matching and parsing\".\nThe fourth item focuses on platform-specific handling: \"better windows path handling\"", "level": "hard", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Begins with a level 2 heading that includes a version number in square brackets [1.0.0], followed by a hyphen -, and then a date 2018-11-05.\nThe heading is followed by an unordered list with four items describing the updates:\nThe first item mentions the addition of a new option: \"adds .onMatch option\".\nThe second item notes improvements to a method: \"improvements to .scan method\".\nThe third item highlights general enhancements: \"numerous improvements and optimizations for matching and parsing\".\nThe fourth item focuses on platform-specific handling: \"better windows path handling\"\n\n* Incomplete Code:\n## [1.0.0] - 2018-11-05\n\n- adds `.onMatch` option\n\n- improvements to `.scan` method\n\n- numerous improvements and optimizations for matching and parsing\n\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "## [1.0.0] - 2018-11-05\n\n- adds `.onMatch` option\n\n- improvements to `.scan` method\n\n- numerous improvements and optimizations for matching and parsing\n\n- better windows path handling", "mask_code": "## [1.0.0] - 2018-11-05\n\n- adds `.onMatch` option\n\n- improvements to `.scan` method\n\n- numerous improvements and optimizations for matching and parsing\n\n[MASK]"}
{"task_id": "Markdown/43-1-single", "prompt": "Generate Markdown code according to the following requirements:Begins with a level 2 heading that includes a version number in square brackets [1.0.0], followed by a hyphen -, and then a date 2018-11-05.\nThe heading is followed by an unordered list with four items describing the updates:\nThe first item mentions the addition of a new option: \"adds .onMatch option\".\nThe second item notes improvements to a method: \"improvements to .scan method\".\nThe third item highlights general enhancements: \"numerous improvements and optimizations for matching and parsing\".\nThe fourth item focuses on platform-specific handling: \"better windows path handling\"", "level": "hard", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Begins with a level 2 heading that includes a version number in square brackets [1.0.0], followed by a hyphen -, and then a date 2018-11-05.\nThe heading is followed by an unordered list with four items describing the updates:\nThe first item mentions the addition of a new option: \"adds .onMatch option\".\nThe second item notes improvements to a method: \"improvements to .scan method\".\nThe third item highlights general enhancements: \"numerous improvements and optimizations for matching and parsing\".\nThe fourth item focuses on platform-specific handling: \"better windows path handling\"\n\n* Incomplete Code:\n## [1.0.0] - 2018-11-05\n\n- adds `.onMatch` option\n\n- improvements to `.scan` method\n\n[MASK]\n\n- better windows path handling\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "## [1.0.0] - 2018-11-05\n\n- adds `.onMatch` option\n\n- improvements to `.scan` method\n\n- numerous improvements and optimizations for matching and parsing\n\n- better windows path handling", "mask_code": "## [1.0.0] - 2018-11-05\n\n- adds `.onMatch` option\n\n- improvements to `.scan` method\n\n[MASK]\n\n- better windows path handling"}
{"task_id": "Markdown/48-0-single", "prompt": "Generate Markdown code according to the following requirements:Starts with a level 3 heading titled \"Example\".\nFollowed by a code block indicated by triple backticks. Inside the backticks, c++ specifies the programming language for syntax highlighting.\nThe code block contains three lines of C++ code:\nDeclaration of a v8::Local<v8::Value> variable named val.\nDeclaration and initialization of a Nan::MaybeLocal<v8::String> variable named str with a call to Nan::To<v8::String>(val).\nDeclaration and initialization of a Nan::Maybe<double> variable named d with a call to Nan::To<double>(val).", "level": "easy", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Starts with a level 3 heading titled \"Example\".\nFollowed by a code block indicated by triple backticks. Inside the backticks, c++ specifies the programming language for syntax highlighting.\nThe code block contains three lines of C++ code:\nDeclaration of a v8::Local<v8::Value> variable named val.\nDeclaration and initialization of a Nan::MaybeLocal<v8::String> variable named str with a call to Nan::To<v8::String>(val).\nDeclaration and initialization of a Nan::Maybe<double> variable named d with a call to Nan::To<double>(val).\n\n* Incomplete Code:\n### Example\n\n```c++\n\n[MASK]\n\nNan::MaybeLocal<v8::String> str = Nan::To<v8::String>(val);\n\nNan::Maybe<double> d = Nan::To<double>(val);\n\n```\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "### Example\n\n```c++\n\nv8::Local<v8::Value> val;\n\nNan::MaybeLocal<v8::String> str = Nan::To<v8::String>(val);\n\nNan::Maybe<double> d = Nan::To<double>(val);\n\n```", "mask_code": "### Example\n\n```c++\n\n[MASK]\n\nNan::MaybeLocal<v8::String> str = Nan::To<v8::String>(val);\n\nNan::Maybe<double> d = Nan::To<double>(val);\n\n```"}
{"task_id": "Markdown/48-1-single", "prompt": "Generate Markdown code according to the following requirements:Starts with a level 3 heading titled \"Example\".\nFollowed by a code block indicated by triple backticks. Inside the backticks, c++ specifies the programming language for syntax highlighting.\nThe code block contains three lines of C++ code:\nDeclaration of a v8::Local<v8::Value> variable named val.\nDeclaration and initialization of a Nan::MaybeLocal<v8::String> variable named str with a call to Nan::To<v8::String>(val).\nDeclaration and initialization of a Nan::Maybe<double> variable named d with a call to Nan::To<double>(val).", "level": "easy", "instruction": "Below is a explanation of Markdown code and incomplete code implementation.\n\n* Docstring: \nGenerate Markdown code according to the following requirements:Starts with a level 3 heading titled \"Example\".\nFollowed by a code block indicated by triple backticks. Inside the backticks, c++ specifies the programming language for syntax highlighting.\nThe code block contains three lines of C++ code:\nDeclaration of a v8::Local<v8::Value> variable named val.\nDeclaration and initialization of a Nan::MaybeLocal<v8::String> variable named str with a call to Nan::To<v8::String>(val).\nDeclaration and initialization of a Nan::Maybe<double> variable named d with a call to Nan::To<double>(val).\n\n* Incomplete Code:\n### Example\n\n```c++\n\nv8::Local<v8::Value> val;\n\n[MASK]\n\nNan::Maybe<double> d = Nan::To<double>(val);\n\n```\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "canonical_solution": "### Example\n\n```c++\n\nv8::Local<v8::Value> val;\n\nNan::MaybeLocal<v8::String> str = Nan::To<v8::String>(val);\n\nNan::Maybe<double> d = Nan::To<double>(val);\n\n```", "mask_code": "### Example\n\n```c++\n\nv8::Local<v8::Value> val;\n\n[MASK]\n\nNan::Maybe<double> d = Nan::To<double>(val);\n\n```"}
