{"task_id": "AWK/36-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\n[MASK]\n    for (word in word_count)\n        if (word_count[word] == 1)\n[MASK]\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\n[MASK]\n    for (word in word_count)\n        if (word_count[word] == 1)\n[MASK]\n[MASK]"}
{"task_id": "AWK/36-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n    for (word in word_count)\n        if (word_count[word] == 1)\n            print word\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words that only appear once in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n[MASK]\n[MASK]\n[MASK]\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n    for (i = 1; i <= NF; i++) word_count[$i]++\n}\nEND {\n[MASK]\n[MASK]\n[MASK]\n[MASK]"}
{"task_id": "AWK/43-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd", "canonical_solution": "awk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd\n\n* Incomplete Code:\n[MASK]\n    num_digits = gsub(/[0-9]/,\"\"); \n[MASK]\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\n[MASK]\n    print line_number\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]\n    num_digits = gsub(/[0-9]/,\"\"); \n[MASK]\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\n[MASK]\n    print line_number\n[MASK]"}
{"task_id": "AWK/43-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd", "canonical_solution": "awk '{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line number with the highest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk '{\n[MASK]\n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n[MASK]\n    if (num_digits > max_digits) {\n        max_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    print line_number\n[MASK]"}
{"task_id": "AWK/44-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd", "canonical_solution": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n[MASK]\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n[MASK]\n        print \"No digits found\";\n    }\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n[MASK]\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n[MASK]\n        print \"No digits found\";\n    }\n[MASK]"}
{"task_id": "AWK/44-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd", "canonical_solution": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n        print line_number;\n    } else {\n        print \"No digits found\";\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Using the awk command in Linux, complete the following task: Print the line number with the lowest number of digits in/etc/passwd\n\n* Incomplete Code:\nawk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n[MASK]\n    } else {\n[MASK]\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk 'BEGIN {min_digits = 999999; line_number = 0}\n{\n    num_digits = gsub(/[0-9]/,\"\"); \n    if (NR == 1 || num_digits < min_digits) {\n        min_digits = num_digits;\n        line_number = NR;\n    }\n}\nEND {\n    if(line_number > 0) {\n[MASK]\n    } else {\n[MASK]\n    }\n}' /etc/passwd"}
{"task_id": "AWK/45-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words containing r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words containing r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n[MASK]\n[MASK]\n[MASK]\n    }\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n[MASK]\n[MASK]\n[MASK]\n    }\n}' /etc/passwd"}
{"task_id": "AWK/45-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words containing r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words containing r in/etc/passwd\n\n* Incomplete Code:\n[MASK]\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]\n    for (i = 1; i <= NF; i++) {\n        if ($i ~ /r/)\n            print $i\n    }\n[MASK]"}
{"task_id": "AWK/46-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words without r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words without r in/etc/passwd\n\n* Incomplete Code:\n[MASK]\n[MASK]\n        if ($i !~ /r/)\n            print $i\n    }\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]\n[MASK]\n        if ($i !~ /r/)\n            print $i\n    }\n[MASK]"}
{"task_id": "AWK/46-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print words without r in/etc/passwd", "canonical_solution": "awk -F':' '{\n    for (i = 1; i <= NF; i++) {\n        if ($i !~ /r/)\n            print $i\n    }\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print words without r in/etc/passwd\n\n* Incomplete Code:\nawk -F':' '{\n[MASK]\n        if ($i !~ /r/)\n[MASK]\n    }\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk -F':' '{\n[MASK]\n        if ($i !~ /r/)\n[MASK]\n    }\n[MASK]"}
{"task_id": "AWK/49-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd", "canonical_solution": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '{\n    line_length = length($0);\n[MASK]\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n[MASK]\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '{\n    line_length = length($0);\n[MASK]\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n[MASK]\n}' /etc/passwd"}
{"task_id": "AWK/49-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd", "canonical_solution": "awk '{\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n        max_line = $0;\n    }\n}\nEND {\n    print max_line;\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the highest number of bytes in/etc/passwd\n\n* Incomplete Code:\n[MASK]\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n[MASK]\n    }\n}\n[MASK]\n    print max_line;\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]\n    line_length = length($0);\n    if (line_length > max_length) {\n        max_length = line_length;\n[MASK]\n    }\n}\n[MASK]\n    print max_line;\n}' /etc/passwd"}
{"task_id": "AWK/50-0-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd", "canonical_solution": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd\n\n* Incomplete Code:\nawk '\n[MASK]\n{\n[MASK]\n[MASK]\n        min_length = line_length;\n[MASK]\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n[MASK]\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "awk '\n[MASK]\n{\n[MASK]\n[MASK]\n        min_length = line_length;\n[MASK]\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n[MASK]"}
{"task_id": "AWK/50-1-multi", "prompt": "Using the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd", "canonical_solution": "awk '\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n        min_line = $0;\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd", "level": "hard", "instruction": "Below is a explanation of AWK code and incomplete code implementation.\n\n* Docstring: \nUsing the awk command in Linux, complete the following task: Print the line with the fewest number of bytes in/etc/passwd\n\n* Incomplete Code:\n[MASK]\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n[MASK]\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd\n\nPlease fill the [MASK]（multiple lines of code may be masked out) and write the complete function.", "mask_code": "[MASK]\nBEGIN { min_length = 999999 } # Start with a very high min length to ensure the first line is less than this value\n{\n    line_length = length($0);\n    if (line_length < min_length) {\n        min_length = line_length;\n[MASK]\n    }\n}\nEND {\n    if (NR > 0) print min_line; # Ensure the file was not empty\n}' /etc/passwd"}
